from lxml import html
import urllib.request
import os
import bcolors
import data

# PROGRAM STATES
sys_debug = True

# ERROR RETURNS
TIMEOUT = 'ret_timeout'

#Private function
#Pings a host to ensure it is alive
def priv_ping(hostname) :
    response = os.system(data.pingWINDOWS + hostname + " > null")
    #Returns non-zero value if connection fails!
    if response == 0 :
        print(hostname)
        return True
    else :
        return False

#Private function
#Returns true if proxy is valid,
#else returns false
def priv_validate(proxy, https=None, google=None):
    #Socks proxy validation
    if (https == None and google == None) :
        if (str(proxy[2]) in data.validCountries and priv_ping(str(proxy[0]))) :
            return True
            
    #HTTP proxy validation (checks google and https conditions)
    elif ((not https and proxy[6] == 'no') or (https and proxy[6] == 'yes')) :
        if ((not google and proxy[5] == 'no') or (google and proxy[5] == 'yes') or (google == None)) :
            if (str(proxy[2]) in data.validCountries and priv_ping(str(proxy[0]))) :
                return True
    return False
    

#Private function
#Returns the tree of the proxy url
#Always resets the proxy to get the new
def priv_getTree(url) :
    proxy_handler = urllib.request.ProxyHandler({})
    opener = urllib.request.build_opener(proxy_handler)
    urllib.request.install_opener(opener)
    req = urllib.request.Request(url, None, data.headers)
    response = urllib.request.urlopen(req)
    page = response.read()
    tree = html.fromstring(page)
    return tree

#Public function
#@param nrOfProxies Nr of proxies returned
#@param https Only get https proxies
#@param google Only get proxies that support google
#Returns a list of http(s) proxies
#Returns None if no proxy was found!
#[ip, port, code, country,  anonymity, google, https, last checked]
def getHttpProxy(nrOfProxies=1,https=False,google=False, blacklist = []) :
    if (sys_debug) :
        print("[*]Parameters: nrOfProxies=%d, https=%r, google=%r" % (nrOfProxies, https, google))
    
    httpProxies = []
    tree = priv_getTree(data.url_http)
    found = 0
    i = 1
    bcolors.printGreen("Starting proxy scan!")
    while(found < nrOfProxies) :
        proxy = tree.xpath(data.path + "[%d]/td/text()" % i)
        if (sys_debug) :
            print(str(proxy))
        if (proxy == []) :
            print("Could not find proxy!")
            return None;
        if (priv_validate(proxy, https, google) and formatP(proxy) not in blacklist) :
            if (sys_debug) :
                bcolors.printGreen("Proxy meeting requirements found!")

            httpProxies.append(proxy)
            found += 1
        i += 1
    return httpProxies

#Public function
#@param nrOfProxies The number of proxies returned
#Returns a list of socks-proxies
#[ip,port,code,country,version,anonymity,https,last checked]
def getSocksProxy(nrOfProxies=1, blacklist = []) :
    socksProxies = []
    tree = priv_getTree(data.url_socks)
    found = 0
    i = 1
    while (found < nrOfProxies) :
        proxy = tree.xpath(data.path + "[%d]/td/text()" % i)
        if (priv_validate(proxy) and formatP(proxy) not in blacklist) :
            socksProxies.append(proxy)
            found += 1
        i += 1
    return socksProxies

#Public function
#@param proxies The proxies that you want formatted
#Returns the proxies in the format: 
# IP:Port
def formatP(proxies) :
    formatted = []
    if (proxies == None or len(proxies) == 0) :
        return None
    for proxy in proxies :
        if (not proxy == None) :
            p = str(proxy[0]) + ":" + str(proxy[1])
            formatted.append(p)
    return formatted

#Public function
#Validates the current proxy
#Does nothing if proxy is valid,
#else prints error and stops program execution
def validateProxy() :
    timeout = 50
    if (sys_debug) :
        print("[*]Validating proxy...")
    try :
        _ip = urllib.request.urlopen('http://api.ipify.org').read()
        _ips = urllib.request.urlopen('https://api.ipify.org').read()
        print(_ip)
        print(_ips)
    except Exception as e:
        if (sys_debug) :
            print("[-]Error while validating proxy!")
        bcolors.printWarning("[-]Error occured while validating proxy!\n" + str(e))
        return TIMEOUT
		
    if (sys_debug) :
        print("[*]Your IP is: " + str(data.myip) + "\n[*]Proxy(HTTP) ip is: " + str(_ip) + "\n[*]Proxy(HTTPS) ip is: " + str(_ips))

    if (_ip == data.myip) :
        input(bcolors.WARNING + "[-]HTTP proxy error detected! Press enter to continue, or Ctrl+C to interrupt..." + bcolors.ENDC)
    if (_ips == data.myip) :
        input(bcolors.WARNING + "[-]HTTPS proxy error detected! Press enter to continue, or Ctrl+C to interrupt..." + bcolors.ENDC)

        
# Takes a proxy in the format of IP:Port and installs
# an opener with that proxy
#@param proxf, the formatted proxy
#@param proxfhttps, optional formatted https proxy
def installProxy(proxf, proxfhttps = None) :
    if (proxfhttps == None) :
        proxy = urllib.request.ProxyHandler ({
            'http':proxf
        })
    else :
        proxy = urllib.request.ProxyHandler ({
            'http':proxf,
            'https':proxfhttps
        })
    opener = urllib.request.build_opener(proxy)
    urllib.request.install_opener(opener)
    
if __name__ == '__main__' :
    #Test cases
    proxy = getSocksProxy()
    print(proxy)
    proxy = formatP(proxy)
    print(proxy)
    