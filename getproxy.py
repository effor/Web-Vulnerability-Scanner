from lxml import html
import urllib.request
import os
import bcolors
sys_debug = True
headers = { 'User-Agent' : 'Mozilla/5.0' }
url_http = 'http://free-proxy-list.net'
url_socks = 'http://socks-proxy.net'
path = '//table[@id="proxylisttable"]/tbody/tr'
myip = "111.111.111.111" #Set this yourself!


# ERROR RETURNS
TIMEOUT = 'ret_timeout'

#Private function
#Pings a host to ensure it is alive
def priv_ping(hostname) :
        response = os.system("ping -c 1 -W 1 " + hostname)
        #Returns non-zero value if connection fails!
        if response == 0 :
                return True
        else :
                return False

#Private function
#Returns true if proxy is valid,
#else returns false
def priv_validate(proxy, https=None, google=None):
    validCountries = ['RU', 'FR', 'GB', 'SE', 'NL', 'PL', 'DE', 'LT', 'LV', 'UA', 
                      'IT', 'IN', 'BG', 'EE', 'IR', 'TH', 'AM', 'TW', 'PT', 'AL', 
                      'AD', 'BE', 'BY', 'BA', 'CZ', 'DK', 'ES', 'FO', 'FI', 'GE',
                      'GI', 'GR', 'HU', 'HR', 'LU', 'PO', 'TR']
    #Socks proxy validation
    if (https == None and google == None) :
        if (str(proxy[2]) in validCountries and priv_ping(str(proxy[0]))) :
            return True
    #HTTP proxy validation (checks google and https conditions)
    elif ((not https and proxy[6] == 'no') or (https and proxy[6] == 'yes')) :
        if ((not google and proxy[5] == 'no') or (google and proxy[5] == 'yes') or (google == None)) :
            if (str(proxy[2]) in validCountries and priv_ping(str(proxy[0]))) :
                return True
    return False
    

#Private function
#Returns the tree of the url
#Always resets the proxy to get the new
def priv_getTree(url) :
    proxy_handler = urllib.request.ProxyHandler({})
    opener = urllib.request.build_opener(proxy_handler)
    urllib.request.install_opener(opener)
    req = urllib.request.Request(url, None, headers)
    response = urllib.request.urlopen(req)
    page = response.read()
    tree = html.fromstring(page)
    return tree

#Public function
#@param nrOfProxies Nr of proxies returned
#@param https Only get https proxies
#@param google Only get proxies that support google
#Returns a list of http(s) proxies
#Returns None if no proxy was found!
#[ip, port, code, country,  anonymity, google, https, last checked]
def getHttpProxy(nrOfProxies=1,https=False,google=False, blacklist = []) :
    if (sys_debug) :
        print("[*]Parameters: nrOfProxies=%d, https=%r, google=%r" % (nrOfProxies, https, google))
    
    httpProxies = []
    tree = priv_getTree(url_http)
    found = 0
    i = 1
    print(bcolors.GREEN + "Starting scan!" + bcolors.ENDC)
    while(found < nrOfProxies) :
        proxy = tree.xpath(path + "[%d]/td/text()" % i)
        if (sys_debug) :
            print(str(proxy))
        if (proxy == []) :
            print("Could not find proxy!")
            return None;
        if (priv_validate(proxy, https, google) and proxy[0] not in blacklist) :
            if (sys_debug) :
                print(bcolors.GREEN + "Proxy meeting requirements found!" + bcolors.ENDC)

            httpProxies.append(proxy)
            found += 1
        i += 1
    return httpProxies

#Public function
#@param nrOfProxies The number of proxies returned
#Returns a list of socks-proxies
#[ip,port,code,country,version,anonymity,https,last checked]
def getSocksProxy(nrOfProxies=1, blacklist = []) :
    socksProxies = []
    tree = priv_getTree(url_socks)
    found = 0
    i = 1
    while (found < nrOfProxies) :
        proxy = tree.xpath(path + "[%d]/td/text()" % i)
        if (priv_validate(proxy)) :
            socksProxies.append(proxy)
            found += 1
        i += 1
    return socksProxies

#Public function
#@param proxies The proxies that you want formatted
#Returns the proxies in the format: 
# IP:Port
def formatP(proxies) :
    formatted = []
    if (proxies == None or len(proxies) == 0) :
        return None
    for proxy in proxies :
        p = str(proxy[0]) + ":" + str(proxy[1])
        formatted.append(p)
    return formatted

#Public function
#Validates the current proxy
#Does nothing if proxy is valid,
#else prints error and stops program execution
def validateProxy() :
    timeout = 50
    if (sys_debug) :
        print("[*]Validating proxy...")
    try :
        ip = urllib.request.urlopen('http://api.ipify.org',None,timeout = timeout).read()
        ips = urllib.request.urlopen('https://api.ipify.org',None,timeout = timeout).read()
    except Exception as e:
        if (sys_debug) :
            print("[-]Error while validating proxy!")
        print(bcolors.WARNING + "[-]Error occured while validating proxy!\n" + str(e) + bcolors.ENDC)
        return TIMEOUT
    if (sys_debug) :
        print("[*]Your IP is: " + str(myip) + "\nProxy(HTTP) ip is: " + ip + "\nProxy(HTTPS) ip is: " + ips)

    if (ip == myip) :
        input(bcolors.WARNING + "[-]HTTP proxy error detected! Press enter to continue, or Ctrl+C to interrupt..." + bcolors.ENDC)
    if (ips == myip) :
        raw_input(bcolors.WARNING + "[-]HTTPS proxy error detected! Press enter to continue, or Ctrl+C to interrupt..." + bcolors.ENDC)

if __name__ == '__main__' :
    #Test cases
    proxy = getSocksProxy()
    proxy = formatP(proxy)
    